Javascript API Readme
=====================

Version: 0.3
Author: Paul Kinlan (paul.kinlan@gmail.com) twitter.com/PaulKinlan
Date: 1st June 2009


Introduction
============

At the very core of the Javascript API is the use of XMPP. 

You page will open up an anonymous sessions with our service, and we will send all messages from the associated phone call to that browser screen.


Getting Started
===============

After you have created your game commands on www.vooices.us you are ready to start interfacing with it via javascript.

 1. Reference the dependencies
	<!-- JQuery is required -->
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js" type="text/javascript"></script>
	<!-- Base64 encoding library is required -->
	<script src="jquery.base64.js" type="text/javascript"></script>
	<!-- The current API libarary that vooices.js requires -->
	<script src="jquery.bosh.js" type="text/javascript"></script>
	<!-- The vooices API library -->
	<script src="vooices.js" type="text/javascript"></script>
	
 2. Create a document load function as follows:
	$(document).ready(function()
	{	
		Vooices.GameController.init(["NORTH", "SOUTH", "EAST", "WEST"])
		
		Vooices.GameController.on_logged_in = on_login;
								
		/*
			Handle the commands that you defined in the game admin panel
			
			The on_XYZ commands are created dynamically.
		*/
		
		Vooices.GameController.on_north = on_north;
		Vooices.GameController.on_south = on_south;
		Vooices.GameController.on_east = on_east;
		Vooices.GameController.on_west = on_west;
					
		Vooices.GameController.login()
				
	})
	
	2.a. The init method requires a string list of all the commands that your application will use.  For example the Maps application will use the following commands.
	2.b. Register a method that is called when the system has connected to our backend software.
	2.c. For each command that is set up in the call to init(), create and assign a call-back of the for Voices
	2.d. Call Vooices.GameController.login(), this will log the current screen into our system.
	
At this point the screen might be logged in to the system, however there is no phone call to attach to the screen.  This has to be initiated by they user of your software.  To get the correct information to the user about how they can log into the screen, the following must be done.
	
 3. Create the on_login method, this method is called when a user is connected to the system.
 
	function on_login()
	{
		jid = Vooices.GameController.session_id()
		gameid = /* THE GAME ID OF YOU APPLICATION */
		$.post('http://server.vooices.us/check?SessionID=' + jid +'&Locale=' + window.navigator.language  + '&gameID=' + gameid, {},  parseResponse)
	}
	
	function parseResponse(data, textStatus) { ... ... ... }
	
	The above piece of code asks our Game Controller software for authentication details that will associate the browser with a phone call, the results of which will be handed to the parseResponse Function.
	
	From this point you have all the information that a user will need to dial into the screen.
	
 4. Once a user has dialled into the screen when the commands are intercepted the associated Javascript function will be called.
    For instance if the user says "north" on the phone, the web page will recieve notification and the API helper will call the "on_north" callback.
	
Thats about it.

Vooices.us Team.
	